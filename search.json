[{"title":"使用chaijs、mocha、selenium-webdriver进行自动化测试","url":"/2022/06/16/Automated testing using chaijs, mocha, selenium-webdriver/","content":"\n### 初始化项目，安装依赖\n\n```bash\nmkdir auto-test\ncd ./auto-test\nnpm init\nnpm install chai chai-webdriver mocha selenium-webdriver\nmkdir test\nnpm set-script test \"mocha ./test/index.js\"\n```\n\n### 下载驱动程序\n\n选择所使用的浏览器下载对应版本的驱动程序，并解压放在项目文件夹下\n\n<!-- more -->\n\n* Chrome: [chromedriver(.exe)][chrome]\n* Internet Explorer: [IEDriverServer.exe][release]\n* Edge: [MicrosoftWebDriver.msi][edge]\n* Firefox: [geckodriver(.exe)][geckodriver]\n* Opera: [operadriver(.exe)][operadriver]\n* Safari: [safaridriver]\n\n### 代码示例\n\n在 `test` 目录下创建 `index.js` 文件，并写入如下代码\n\n```javascript\n(async function run() {\n    /**\n     * 启动web驱动程序，供后续测试程序调用浏览器\n     */\n    const { Builder, Capabilities, By } = require('selenium-webdriver');\n    const chrome = require('selenium-webdriver/chrome');\n    const options = new chrome.Options(); // 新建配置\n    options.addArguments([\n        '--ignore-certificate-errors',\n        '--ignore-ssl-errors',\n    ]); // 处理SSL证书错误问题\n    options.excludeSwitches([\n        'enable-automation',\n        'enable-logging',\n    ]); // 忽略日志\n    const driver = new Builder()\n        .withCapabilities(Capabilities.chrome()) // 使用chrome浏览器\n        .setChromeOptions(options) // 调用配置\n        .build() // 启动驱动程序\n\n    /**\n     * 测试程序\n     */\n    const chai = require('chai');\n    const chaiWebdriver = require('chai-webdriver');\n    chai.use(chaiWebdriver(driver));\n    describe('example.com', function () {\n        it('www.example.com访问测试', function (done) {\n            driver.get('http://www.example.com/').then(async () => {\n                const title = await driver.findElement(By.css('body > div > h1')).getText();\n                chai.expect(title).to.equal('Example Domain');\n                done();\n            }).catch((err) => {\n                done(err);\n            });\n        });\n    });\n})();\n\n```\n\n### 运行\n\n```bash\nnpm test\n```\n\n### 测试结果\n\n如图所示\n\n![alt 测试结果](../images/test-result-bash.png)\n\n### 测试结果美化\n\n通过 `mochawesome` 将命令行输出的测试结果生成为静态网页便于查看和保存\n运行如下命令安装 `mochawesome`\n\n```bash\nnpm install mochawesome\nnpm set-script test \"mocha ./test/index.js --reporter mochawesome\"\n```\n\n再次执行 `npm test` 运行测试程序后，就会在项目文件夹下生成 `mochawesome-report` 目录，打开 `./mochawesome-report/mochawesome.html` 就能查看测试结果了\n\n![alt 测试结果](../images/test-result-web.png)\n\n### Q&A\n\n* 超时报错: 如果出现超时报错可以在test命令后添加参数 `--timeout 10000` 将测试的超时时间设置的更长一些\n\n> [selenium-webdriver](https://github.com/SeleniumHQ/selenium/tree/trunk/javascript/node/selenium-webdriver#readme)\n\n[chrome]: http://chromedriver.storage.googleapis.com/index.html\n[edge]: http://go.microsoft.com/fwlink/?LinkId=619687\n[geckodriver]: https://github.com/mozilla/geckodriver/releases/\n[release]: https://www.selenium.dev/downloads/\n[safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\n[operadriver]: https://github.com/operasoftware/operachromiumdriver/releases\n","tags":["自动化测试","e2e","javascript","chaijs","mocha","selenium-webdriver"],"categories":["Code","frontend"]},{"title":"Windows10 使用 WSL ( Windows System Linux ) 子系统进行开发","url":"/2021/07/13/Windows10-使用-WSL-Windows-System-Linux-子系统进行开发/","content":"\n## 适用于 Linux 的 Windows 子系统 (WSL) 是 Windows 10 的一项功能，可用于直接在 Windows 上运行本机 Linux 命令行工具\n\n---\n\n### WSL优点\n\n* Windows应用和Linux Terminal两者兼得，无缝切换\n* 占用资源少（WSL 所需的资源（CPU、内存和存储）少于完整虚拟机所需的资源）\n* 启动快（相比虚拟机WSL只需要启动一个Linux Terminal即可启动子系统，一般只需几秒钟）\n* Linux相比Windows可以使用apt等包管理工具，安装环境更为便捷\n* Windows可以直接操作WSL的用户目录（可以通过```\\\\wsl$\\```访问WSL目录，并对用户目录```~\\```有写权限）\n\n---\n\n<!-- more -->\n\n### WSL Install 安装\n\n1. 启用wsl功能及虚拟化，以管理员身份打开 PowerShell 并运行：\n\n   ```terminal\n   dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n   ```\n\n   ```terminal\n   dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n   ```\n\n2. 重启电脑\n3. 下载[适用于 x64 计算机的 WSL2 Linux 内核更新包](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi)并安装\n4. 设置WSL版本为WSL2\n\n   ```terminal\n   wsl --set-default-version 2\n   ```\n\n5. 通过[应用商店 Microsoft Store](https://aka.ms/wslstore)下载所需的Linux发行版\n   * 如无法访问应用商店，可以通过[微软文档：手动下载适用于 Linux 的 Windows 子系统发行版包](https://docs.microsoft.com/zh-cn/windows/wsl/install-manual) 下载所需Linux发行版安装包手动安装\n6. 运行所安装的Linux发行版进行初始化，设置用户密码\n7. 安装所需环境\n8. 在文件资源管理器中创建网络位置```\\\\wsl$\\```便于访问WSL中的文件\n9. 建议安装[Microsoft Terminal](https://github.com/microsoft/terminal/releases)并使用，其可以在多个选项卡 (在命令提示符、PowerShell 或多个 Linux 分发) 之间快速切换\n10. 建议在WSL用户目录```~\\```下进行项目开发\n\n---\n\n### FrontEnd Development 前端开发\n\n1. Windows下安装[VS Code](https://code.visualstudio.com/)\n2. VS Code安装[Remote-WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)或[Remote Development](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)插件即可直接对WSL进行“远程开发”\n3. WSL安装nvm，最新版本可以到github查看[github/nvm](https://github.com/nvm-sh/nvm/releases)\n\n   ```terminal\n   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n   ```\n\n   ```terminal\n   export NVM_DIR=\"$HOME/.nvm\"\n   ```\n\n4. 安装所需版本的nodejs，如v14\n\n   ```terminal\n   nvm install v14\n   ```\n\n5. 配置git并创建ssh key：\n\n   ```terminal\n   cd ~\n   mkdir .ssh\n   cd ~/.ssh\n   git config --global user.name \"Your Name\"\n   git config --global user.email \"YourEmail@example.com\"\n   ssh-keygen -trsa -C \"YourEmail@example.com\"\n   cat id_rsa.pub\n   ```\n\n   * 复制ssh key并在github等平台配置\n\n> [适用于 Linux 的 Windows 子系统文档（微软官方文档）](https://docs.microsoft.com/zh-cn/windows/wsl/)\n","tags":["WSL","Windows10"],"categories":["Other"]},{"title":"Typescript 项目使用 jest 进行单元测试","url":"/2019/12/11/Typescript项目使用jest进行单元测试/","content":"\n## 安装依赖\n\n```bash\nnpm install --save-dev typescript jest ts-jest @types/jest\n```\n\n## 创建jest配置文件\n\n```bash\nnpx ts-jest config:init\n```\n\n<!-- more -->\n\n## 配置jest，往jest.config.js中添加如下配置\n\n```javascript\nconst { default: tsjPreset } = require('ts-jest/presets');\nmodule.exports = {\n  roots: [\"<rootDir>/tests\"],\n  verbose: true,\n  transform: {\n    \"^.+\\\\.tsx?$\": \"ts-jest\"\n  },\n  globals: {\n    \"ts-jest\": {\n      diagnostics: false\n    }\n  }\n}\n```\n\n## 在package.json中添加脚本\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"jest --collectCoverage\"\n  }\n}\n```\n\n## 创建测试文件\n\n```bash\nmkdir tests\ncd tests\ntouch index.test.ts\n```\n\n### src/index.ts //待测试文件\n\n```typescript\nexport function sum(a: number, b: number) {\n  return a + b;\n}\n```\n\n### index.test.ts\n\n```typescript\nimport { sum } = from '../src/index';\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n## 配置tsconfig.json\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */\n    \"module\": \"commonjs\",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */\n    \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\n    \"outDir\": \"./dist/\",                        /* Redirect output structure to the directory. */\n    \"rootDir\": \"./src/\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n    \"strict\": true,                           /* Enable all strict type-checking options. */\n    \"esModuleInterop\": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n    \"forceConsistentCasingInFileNames\": true  /* Disallow inconsistently-cased references to the same file. */\n  },\n  \"exclude\": [\"node_modules\", \"tests/**/*.test.ts\"]\n}\n```\n\n## 目录结构\n\n```\n.\n├── coverage\n│   ├── clover.xml\n│   ├── coverage-final.json\n│   ├── lcov-report\n│   │   ├── base.css\n│   │   ├── block-navigation.js\n│   │   ├── index.html\n│   │   ├── index.ts.html\n│   │   ├── prettify.css\n│   │   ├── prettify.js\n│   │   ├── sort-arrow-sprite.png\n│   │   └── sorter.js\n│   └── lcov.info\n├── dist\n│   ├── index.d.ts\n│   └── index.js\n├── node_modules\n├── jest.config.js\n├── package-lock.json\n├── package.json\n├── src\n│   └── index.ts\n├── tests\n│   └── index.test.ts\n└── tsconfig.json\n```\n\n## 运行测试\n\n```bash\nnpm run test\n```\n\n### 运行测试后，console会显示测试结果\n\n### 同时会生成coverage目录，该目录下存有测试结果\n\n> [jest官网](https://jestjs.io/zh-Hans/)\n","tags":["jest","test","Typescript"],"categories":["Code","nodejs"]},{"title":"搭建使用 Typescript，Scss 的 React 项目","url":"/2019/11/26/搭建使用Typescript，Scss的React项目/","content":"\n1、创建使用Typescript的项目\n\n```bash\nnpx create-react-app my-app --typescript\n```\n\n2、安装sass依赖\n\n<!-- more -->\n\n这里注意sass-loader的版本是7.3.1，使用最新版本可能会出现不兼容现象。截止至发稿，最新的8.0.0在node.js12下报错。\n\n```bash\nnpm install node-sass --save-dev\nnpm install sass-loader@7.3.1 --save-dev\nnpm install style-loader --save-dev\n```\n\n3、修改webpack配置\n\n添加以下配置\n\n```javascript\n{\n  test: /\\.scss$/,\n  loaders: ['style-loader', 'css-loader', 'sass-loader'],\n},\n```\n至node_modules/react-scripts-ts/config/webpack.config.dev.js 里的如下位置\n\n```javascript\n{\n  test: /\\.scss$/,\n  loaders: ['style-loader', 'css-loader', 'sass-loader'],\n},\n// \"file\" loader makes sure those assets get served by WebpackDevServer.\n// When you `import` an asset, you get its (virtual) filename.\n// In production, they would get copied to the `build` folder.\n// This loader doesn't use a \"test\" so it will catch all modules\n// that fall through the other loaders.\n{\n  // Exclude `js` files to keep \"css\" loader working as it injects\n  // its runtime that would otherwise processed through \"file\" loader.\n  // Also exclude `html` and `json` extensions so they get processed\n  // by webpacks internal loaders.\n  exclude: [/\\.(js|jsx|mjs)$/, /\\.html$/, /\\.json$/],\n  loader: require.resolve('file-loader'),\n  options: {\n    name: 'static/media/[name].[hash:8].[ext]',\n  },\n}\n```\n\n4、运行项目\n\n```bash\nnpm run start\n```\n","tags":["React"],"categories":["Code","frontend"]},{"title":"Ubuntu Server 18/16 安装 node.js 生产环境","url":"/2019/11/10/Ubuntu-Server-18-16-安装-node-js-生产环境/","content":"\n\n### 安装npm\n\n```bash\nsudo apt install npm\n```\n\n### 安装n模块（n模块专门用于管理node.js版本）\n\n```bash\nsudo npm install -g n\n```\n\n### 安装node.js\n\n```bash\nsudo n stable\n```\n\n<!-- more -->\n\n### 安装pm2（node进程管理工具）\n\n```bash\nsudo npm install -g pm2\n```\n\n### 上传项目文件（这里我以一个开源的koa项目为例）\n\n```bash\ngit clone https://github.com/TaleLin/lin-cms-koa.git starter\n```\n\n### 安装依赖\n\n```bash\nsudo npm install\n```\n\n### 配置数据库（app/config/secure.js ）\n\n```javascript\nmodule.exports = {\n  db: {\n    database: \"lin-cms\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"root\",\n    password: \"123456\",\n    logging: false\n  }\n};\n```\n\n### 启动项目\n\n```bash\nsudo pm2 start index.js --name uops\n```\n\n### 更改项目需要重启时\n\n```bash\nsudo pm2 delete uops\nsudo pm2 start index.js --name uops -f\n```\n","tags":["Ubuntu","node.js"],"categories":["Server"]},{"title":"Ubuntu server 18/16 开启 root 访问 ssh","url":"/2019/11/09/Ubuntu-server-18-16开启root访问ssh/","content":"\n### 开启root用户\n\n```bash\nsudo passwd root\n```\n\n### 安装 openssh-server\n\n```bash\nsudo apt -y install openssh-server\n```\n\n<!-- more -->\n\n### 编辑配置文件\n\n```bash\nsudo vi /etc/ssh/sshd_config\n```\n\n在行`#PermitRootLogin prohibit-password`后面换行添加以下内容\n\n```plaintext\nPermitRootLogin yes\n```\n\n### 启动服务\n\n```bash\nsudo service sshd start\n```\n\n注：不建议对公网开启root访问，有较大的安全隐患\n","tags":["Ubuntu","ssh"],"categories":["Server"]},{"title":"CSS 选择器优先级","url":"/2019/10/25/CSS选择器优先级/","content":"\n#### 下表由上到下 从左到右 优先级依次降低\n\n|   |   |   |\n| - | - | - |\n| `!important` | | |\n| ID 选择器 (例如，`#example`) | | |\n| 伪类 (例如，`:hover`) | 属性选择器 (例如，`div[type=”radio”]`)  | 类选择器 (例如，`.example`) |\n| 伪元素 (例如，`::before`) | 标签选择器 (例如，`h1`) |\n\n|   |\n| - |\n| 标签内style属性（例如：`<div style=”color: red;”></div>`）|\n| 页面内`<style></style>`中定义的样式 |\n| 引用的外部文件内的样式 |\n\n<!-- more -->\n\n#### 总结的优先级表如下，左上角优先级最高，右下角优先级最低\n\n|   |   |   |\n| - | - | - |\n| 标签内style属性的`!important` | | |\n| HTML页面`<style></style>`中的`!important` | | |\n| 引用的外部文件内的样式中的`!important` | | |\n| 标签内style属性中的样式 | | |\n| 页面内`<style></style>`中定义的ID选择器 | | |\n| 页面内`<style></style>`中定义的伪元素 | 标签选择器 | |\n| 引用的外部文件内定义的ID | 选择器 | |\n| 引用的外部文件内定义的伪类 | 属性选择器 | 类选择器 |\n| 引用的外部文件内定义的伪元素 | 标签选择器 | |\n","tags":["css"],"categories":["Code","frontend"]},{"title":"Ubuntu18.04 安装 GitLab","url":"/2019/10/19/Ubuntu1804-install-GitLab/","content":"\n### 安装依赖项\n\n```bash\nsudo apt update\nsudo apt install -y curl openssh-server ca-certificates\nsudo apt install -y postfix\n```\n\n选择 Internet Site\n\n### 安装 GitLab\n\n#### 首先信任 GitLab 的 GPG 公钥\n\n```bash\ncurl https://packages.gitlab.com/gpg.key 2> /dev/null | sudo apt-key add - &>/dev/null \n```\n\n<!-- more -->\n\n#### 设置清华大学安装源\n\n```bash\nsudo vi /etc/apt/sources.list.d/gitlab-ce.list\n```\n\n加入以下文字\n\n```plaintext\ndeb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu xenial main\n```\n\n#### 安装\n\n```bash\nsudo apt update\nsudo apt install gitlab-ce\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl start\n```\n\n### 访问GitLab\n\n[localhost](http://localhost)\n\n> [Gitlab Ce | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror] (https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/)\n> [Ubuntu18.04 GitLab仓库服务器搭建](https://blog.csdn.net/EthanCo/article/details/82828097)\n","tags":["Ubuntu","GitLab"],"categories":["Server"]},{"title":"Angular 元素外部的 click 事件","url":"/2019/09/20/Angular元素外部的click事件/","content":"\n### 我们在编写下拉菜单一类组件的时候常常需要点击下拉菜单以外的地方时关闭下拉菜单的效果。我们一般使用 [ng-click-outside](https://www.npmjs.com/package/ng-click-outside) 插件，一般情况下元素外部的click事件这个插件都能解决\n\n![这个下拉菜单的关闭就用到了clickOutside事件](/images/01.gif)\n\n<!-- more -->\n\n* 插件安装\n\n```bash\nnpm install --save ng-click-outside\n```\n\n* 插件使用\n\n```html\n<div (clickOutside)=\"onClickedOutside($event)\">My element</div>\n```\n\n#### 一般情况下的click事件这个插件都可以解决，但是当元素有点击后消失的后代（比如单选的下拉菜单）时这个插件就会出现问题\n\n![单选下拉菜单选择后关闭](/images/02.gif)\n\n#### 下面我们来分析一下ng-click-outside的代码\n\n```typescript\nprivate _onClickBody(ev: Event) {\n  if (!this.clickOutsideEnabled) { return; }\n  if (this.excludeBeforeClick) {\n    this._excludeCheck();\n  }\n  if (!this._el.nativeElement.contains(ev.target) && !this._shouldExclude(ev.target)) {\n    this._emit(ev);\n    if (this.attachOutsideOnClick) {\n      this._removeClickOutsideListener();\n    }\n  }\n}\nprivate _shouldExclude(target): boolean {\n  for (let excludedNode of this._nodesExcluded) {\n    if (excludedNode.contains(target)) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n我们看一下上面那段ng-click-outside的源码，_onClickBody方法在click事件点击后调用，使用contains方法判断event所在元素是否在本元素或排除元素中，如果元素不满足该条件则触发（clickOutside）事件。\n\n这会产生一个问题，如果你调用（clickOutside）事件的元素中包含如下拉菜单等会因为自身点击而消失于DOM的元素 会导致（clickOutside）事件的意外触发。\n这是因为ng-click-outside是使用event.target来做判断的，target是触发事件的对象 (某个DOM元素) 的引用，但是这时该DOM元素已经不在DOM中了，所以导致事件错误触发。\n\n编写自定义指令实现clickOutside事件\n使用event.path能很好的避免该情况，path包含了事件冒泡过程的所有元素（chrome中使用path属性，Firefox和Safari中使用composedPath方法），只要path中含有本元素的后代或排除元素的后代即表面clickInside。这样就避免了clickOutside的错误触发。\n\n下面我们来写一个自定义指令，使用event.path中的数据来判断产生的click元素是否属于指定元素内。\n\n```typescript\nimport { Directive, Output, EventEmitter, ElementRef, HostListener, Input } from '@angular/core';\n@Directive({\n  selector: '[appClickOutside]'\n})\nexport class ClickOutsideDirective {\n  @Output() appClickOutside = new EventEmitter<void>();\n  constructor(private elementRef: ElementRef) { }\n  @HostListener('document:click', ['$event'])\n  public onClick(event) {\n    const clickedInside = event.path.slice(0, -2).some((item: any) => {\n      return this.elementRef.nativeElement.contains(item);\n    });\n    if (!clickedInside) {\n      this.appClickOutside.emit();\n    }\n  }\n}\n```\n\n有时候还会遇到一些组件使用全局布局的情况，这时候就要添加一个输入属性记录要额外排除的元素。这里我引入了exclude属性，通过exclude输入一个css选择器记录排除的元素，但如果记录的元素本身在点击后会消失于DOM则无效（即对于消失的元素，选择器仅检索其后代）\n\n```typescript\nimport { Directive, Output, EventEmitter, ElementRef, HostListener, Input } from '@angular/core';\n@Directive({\n  selector: '[appClickOutside]'\n})\nexport class ClickOutsideDirective {\n  @Input() exclude = '';\n  @Output() appClickOutside = new EventEmitter<void>();\n  constructor(private elementRef: ElementRef) { }\n  @HostListener('document:click', ['$event'])\n  public onClick(event) {\n    let clickedInExclude = false;\n    if (this.exclude) {\n      try {\n        if (document.querySelectorAll(this.exclude).length) {\n          clickedInExclude = Array.from(document.querySelectorAll(this.exclude)).some((item: any) => {\n            return item.contains(event.target);\n          });\n        } else {\n          clickedInExclude = event.path.slice(0, -2).some((item: any) => {\n            return item.querySelector(this.exclude);\n          });\n        }\n      } catch (err) {\n        console.error('[click-outside] Check your exclude selector syntax.', err);\n      }\n    }\n    const clickedInside = event.path.slice(0, -2).some((item: any) => {\n      return this.elementRef.nativeElement.contains(item);\n    });\n    console.log(event.path);\n    console.log(event.target);\n    if (!clickedInside && !clickedInExclude) {\n      this.appClickOutside.emit();\n    }\n  }\n}\n```\n","tags":["Angular","frontend"],"categories":["Code","frontend"]},{"title":"node.js、React、Angular 及 Typescript 安装","url":"/2019/07/23/install-nodejs-&-React-&-Angular-&-Typescript/","content":"\n### Node.js安装\n\n前往[node.js官网](https://nodejs.org)下载 Windows 版安装包，下载后 next 傻瓜式安装\n\n打开 cmd 输入\n\n```bash\nnode -v\n```\n\n查看 node.js 版本（验证安装是否成功）。\n\n<!-- more -->\n\n### React安装\n\n在安装了 node.js 的基础上在 cmd 中依次输入以下命令安装并验证\n\n```bash\nnpm install -g create-react-app\ncreate-react-app -help\n```\n\n### Angular 安装\n\n在安装了 node.js 的基础上在 cmd 中依次输入以下命令安装并验证\n\n```bash\nnpm install -g @angular/cli\nng help\n```\n\n### Typescript 安装\n\n在安装了 node.js 的基础上在 cmd 中依次输入以下命令安装并验证\n\n```bash\nnpm install -g typescript\ntsc -help\n```\n","tags":["Angular","Typescript","node.js","React"],"categories":["Code","frontend"]},{"title":"Python3 多线程 Thread","url":"/2019/03/16/Python3-Multithreading-Thread/","content":"\n\n多线程向数据库插入随机数据。\n\n连接SQL server请参考：[python3 使用 pymssql 连接 SQL Server](/2019/03/15/python3-use-pymssql-connect-SQL-Server/)\n\n启用两个线程分别向数据库‘databasename’中的表‘DATA1’和‘DATA2’插入随机数据。\n\n<!-- more -->\n\n```python\nimport random\nimport time\nimport threading\nfrom connect_DB.connect_sqlserver import *\nclass MyThread(threading.Thread):\n    def __init__(self, min, max, table_name, sleep_time):\n        threading.Thread.__init__(self)\n        self.conn = ConnectSqlserver(host='localhost', user=\"username\", password=\"password\", db=\"databasename\")\n        self.sleep_time = sleep_time\n        self.table_name = table_name\n        self.min = min\n        self.max = max\n    def run(self):  # 把要执行的代码写到run函数里面 线程在创建后会直接运行run函数\n        while True:\n            time.sleep(self.sleep_time)\n            data = random.randint(self.min, self.max)\n            sql = 'INSERT INTO ' + self.table_name + '([VALUE]) VALUES(' + str(data) + ');'\n            self.conn.run_sql(sql)\ndef main():\n    try:\n        # 创建新线程\n        thread1 = MyThread(100, 120, 'DATA1', 1)\n        thread2 = MyThread(100, 120, 'DATA2', 1)\n        # 开启线程\n        thread1.start()\n        thread2.start()\n    except Exception as e:\n        print('Error: ', e)\n    while 1:\n        pass\nif __name__ == '__main__':\n    main()\n```\n\n输出如下\n\n```plaintext\n...\nINSERT INTO DATA1([VALUE]) VALUES(101);\nINSERT INTO DATA1([VALUE]) VALUES(115);\nINSERT INTO DATA2([VALUE]) VALUES(110);\nINSERT INTO DATA1([VALUE]) VALUES(120);\nINSERT INTO DATA2([VALUE]) VALUES(112);\nINSERT INTO DATA1([VALUE]) VALUES(112);\nINSERT INTO DATA2([VALUE]) VALUES(104);\n...\n```\n\n> [threading --- 基于线程的并行](https://docs.python.org/zh-cn/3/library/threading.html)\n","tags":["Thread"],"categories":["Code","Python"]},{"title":"ECharts + Python3 Flask 实现数据实时监控","url":"/2019/03/16/ECharts-Python3-Flask-实现数据实时监控/","content":"\n## 思路\n\n![项目架构](/images/04.png)\n\n前端将已有数据中最大的id作为请求数据，\n\n通过 `setInterval(function( ){ }, 1000);` 函数每间隔一秒向后端请求一次数据。\n\n<!-- more -->\n\n后端查找数据库中id大于前端返回的id的元数据并返回给前端。SQL 语句如下：\n\n```sql\nSELECT * FROM table_name WHERE ID > maxId ORDER BY ID;\n```\n\n## 前端\n\n### 效果图\n\n![数据实时监控效果图](/images/03.gif)\n\n### 前端代码\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>ECharts 数据实时监控</title>\n    <script src=\"/static/js/jquery-3.2.1.min.js\"></script>\n    <script src=\"/static/js/echarts.js\"></script>\n</head>\n<body>\n<div style=\"\">\n    <h2 style=\"text-align: center;\">数据实时监控 Demo</h2>\n</div>\n<div style=\"width: 1000px;height:500px; margin: auto;padding-top: 30px;\">\n    <div id=\"img_1\" style=\"width: 500px;height:450px;float: left;\"></div>\n    <div id=\"img_2\" style=\"width: 500px;height:450px;float: left;\"></div>\n</div>\n<script>\n    var maxId1 = 0;\n    var maxId2 = 0;\n    var data1 = [];\n    var date1 = [];\n    var data2 = [];\n    var date2 = [];\n    var myChart1 = echarts.init(document.getElementById('img_1'));\n    var myChart2 = echarts.init(document.getElementById('img_2'));\n    myChart1.setOption({\n        title: {\n            text: '数据实时监控1'\n        },\n        tooltip: {},\n        legend: {\n            data: ['数据1']\n        },\n        xAxis: {\n            data: date1,\n            axisLabel: {\n                rotate: 45\n            }\n        },\n        yAxis: {},\n        series: [{\n            name: '数据1',\n            type: 'line',\n            data: data1\n        }]\n    });\n    myChart2.setOption({\n        title: {\n            text: '数据实时监控2'\n        },\n        tooltip: {},\n        legend: {\n            data: ['数据2']\n        },\n        xAxis: {\n            data: date2,\n            axisLabel: {\n                rotate: 45\n            }\n        },\n        yAxis: {},\n        series: [{\n            name: '数据2',\n            type: 'line',\n            data: data2\n        }]\n    });\n    setInterval(function () {\n        $.getJSON(\"/get_data/\", {tableName: 'data1', maxId: maxId1}, function (data) {\n            {#如果有新数据#}\n            if (data.maxId > maxId1) {\n                maxId1 = data.maxId;\n                data1 = data1.concat(data.data);\n                date1 = date1.concat(data.date);\n                myChart1.setOption({\n                    xAxis: {\n                        data: date1\n                    },\n                    series: [{\n                        // 根据名字对应到相应的系列\n                        name: '数据1',\n                        data: data1\n                    }]\n                });\n            }\n        });\n        $.getJSON(\"/get_data/\", {tableName: 'data2', maxId: maxId2}, function (data) {\n            if (data.maxId > maxId2) {\n                maxId2 = data.maxId;\n                data2 = data2.concat(data.data);\n                date2 = date2.concat(data.date);\n                myChart2.setOption({\n                    xAxis: {\n                        data: date2\n                    },\n                    series: [{\n                        // 根据名字对应到相应的系列\n                        name: '数据2',\n                        data: data2\n                    }]\n                });\n            }\n        });\n    }, 1000);\n</script>\n</body>\n</html>\n```\n\n## 后端\n\n### 安装flask模块\n\n```bash\npip install flask\n```\n\n### 后端代码\n\n```python\nfrom flask import Flask, render_template, url_for, request\nfrom connect_DB.connect_sqlserver import *\nimport json\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/get_data/')\ndef get_data():\n    \"\"\"\n    获取对应数据表的数据，以json形式返回\n    :param table_name:\n    :return:\n    \"\"\"\n    table_name = request.args.get('tableName', 'DATA1')\n    start_id = request.args.get('maxId', 0)\n    # 创建数据库对象\n    conn = ConnectSqlserver(host='111.231.56.167', user=\"chenjx_data_mining\", password=\"Chenjx%456data\",\n                            db=\"data_mining\")\n    sql = 'SELECT * FROM ' + table_name + ' WHERE ID > ' + start_id + ' ORDER BY ID'\n    data_list = []\n    date_list = []\n    max_id = start_id\n    result = conn.get_data(sql)\n    if result:\n        max_id = result[-1][0]\n        for item in result:\n            date_list.append(item[2].strftime('%Y-%m-%d %H:%M:%S'))    # 将datetime转化成格式化字符串\n            data_list.append(item[1])\n    json_str = json.dumps({'data': data_list, 'date': date_list, 'maxId': max_id}, ensure_ascii=False)\n    # print(json_str)\n    return json_str\nif __name__ == '__main__':\n    app.debug = True\n    app.run()\n```\n\n> 后端代码第二行的connect_DB.connect_sqlserver模块请参考: [python3使用pymssql连接SQL Server](/2019/03/15/python3-use-pymssql-connect-SQL-Server/)\n> 相应的随机数据生成请参考: [Python3多线程向数据库插入随机数据](/2019/03/16/Python3-Multithreading-Thread/)\n> [ECharts](https://echarts.apache.org/zh/index.html)\n> [JQuery](https://jquery.com/)\n","tags":["Flask"],"categories":["Code","Python"]},{"title":"python3 使用 pymssql 连接 SQL Server","url":"/2019/03/15/python3-use-pymssql-connect-SQL-Server/","content":"\n首先通过 pip 安装 pymssql 模块\n\n如果有多个 python 版本并存注意区分\n\n```bash\npip install pymssql\n```\n\n这里我写了一个简单的类以供参考。\n\n<!-- more -->\n\n```python\nimport pymssql\nclass ConnectSqlserver():\n    def __init__(self, host=\"localhost\", user=\"root\", password=\"\", db=\"test\", charset='utf8'):\n        # 打开数据库连接\n        self.conn = pymssql.connect(host=host, user=user, password=password, database=db, charset=charset)\n        # 使用 cursor() 方法创建一个游标对象 cursor\n        self.cursor = self.conn.cursor()\n    def __del__(self):\n        self.conn.close()  # 关闭连接\n    def run_sql(self, sql):\n        # 插入数据, 修改数据， 数据库操作\n        print(sql)\n        try:\n            self.cursor.execute(sql)\n            self.conn.commit()\n        except Exception as e:\n            self.conn.rollback()\n            print('Error: ', e)\n        finally:\n            pass\n    def get_data(self, sql):\n        # 查找数据\n        print(sql)\n        try:\n            self.cursor.execute(sql)\n            return self.cursor.fetchall()\n        except Exception as e:\n            print('Error: ', e)\n        finally:\n            pass\nif __name__ == '__main__':\n    conn = ConnectSqlserver(host='localhost', user=\"username\", password=\"password\",\n                            db=\"databasename\")\n    sql = 'SELECT * FROM DATA1'\n    data = conn.get_data(sql)\n    print(data[-1][0])\n```\n\n> [pymssql - DB-API interface to Microsoft SQL Server](https://pypi.org/project/pymssql/)\n","tags":["pymssql"],"categories":["Code","Python"]},{"title":"Python 函数修饰器 (decorator)","url":"/2019/02/23/Python函数修饰器-decorator/","content":"\n函数修饰器修改其他函数的功能的函数，装饰器可以让你在一个函数的前后去执行指定代码\n\n```python\ndef decorator_func(fn):\n    def inner(*args, **kwargs):\n        print(\"=\"*20)\n        fn(*args, **kwargs)\n        print(\"=\"*20)\n    return inner\n@decorator_func\ndef test_func(*args, **kwargs):\n    print(\"Hello world!\")\ntest_func()\n```\n\n<!-- more -->\n\n上面代码的运行结果如下\n\n```bash\n====================\nHello world!\n====================\n```\n","tags":["decorator"],"categories":["Code","python"]},{"title":"Ubuntu16.04 Apache2 部署 Django2 项目","url":"/2018/11/13/Ubuntu1604-Apache2-deploy-Django2-project/","content":"\n介绍一下环境: Ubuntu16.04、Apache2.4、Django2.1.2、python3.5.2、mysql\n\n## 安装项目依赖\n\n### 创建虚拟环境\n\n为避免权限问题我将虚拟环境创建在`/home/ubuntu下`\n\n```bash\nsudo virtualenv -p /usr/bin/python3.5 /home/ubuntu/env_test\n```\n\n### 激活该虚拟环境\n\n```bash\nsource /home/ubuntu/env_test/bin/activate\n```\n\n<!-- more -->\n\n### 在此虚拟环境中安装所需的库\n\n```bash\npip install -r package.txt\n```\n\npackage.txt的格式如下（包名==版本号）:\n\n```plaintext\nDjango==2.1.2\nPyMySql==0.9.2\n```\n\n## 安装 mod_wsgi\n\n这里我参考了[mod_wsgi官网安装教程](https://modwsgi.readthedocs.io/en/develop/user-guides/quick-installation-guide.html)\n\n### 下载源码并解压\n\n#### 在GitHub上下载.tar源代码并上传服务器`https://github.com/GrahamDumpleton/mod_wsgi/releases`\n\n#### 在服务器端进行解压\n\n  ```bash\n  sudo tar xvfz mod_wsgi-X.Y.tar.gz\n  ```\n\n### 配置包\n\n#### 在源代码目录中运行“configure”脚本\n\n  ```bash\n  sudo ./configure --with-apxs=/usr/local/apache/bin/apxs --with-python=/usr/local/bin/python\n  ```\n\n这里的apxs路径和python路径可以用whereis命名来查看，如查看python路径：\n\n  ```bash\n  whereis python\n  ```\n\n### 编译并安装\n\n  ```bash\n  sudo make\n  sudo make install\n  ```\n\n### 开启wsgi\n\n  ```bash\n  sudo a2enmod wsgi\n  ```\n\n## 设置站点配置文件\n\n这里我参考了[django官方文档](https://docs.djangoproject.com/zh-hans/2.1/howto/deployment/wsgi/modwsgi/)\n\n在`/etc/apache2/sites-available/`下创建`test.conf`文件，做如下配置\n\n```plaintext\n<VirtualHost *:80>\n    ServerAdmin [test@test.com]\n    ServerName [test.com]\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    Alias /media/ /var/www/test/media/\n    Alias /static/ /var/www/test/static/\n\n    <Directory /var/www/test/media/>\n        Require all granted\n    </Directory>\n\n    <Directory /var/www/test/static/>\n        Require all granted\n    </Directory>\n\n    WSGIDaemonProcess Test python-home=/home/ubuntu/env_test python-path=/var/www/test\n    WSGIProcessGroup Test\n    WSGIScriptAlias / /var/www/test/test/wsgi.py\n    <Directory /var/www/test/test/>\n        <Files wsgi.py>\n           Require all granted\n        </Files>\n    </Directory>\n</VirtualHost>\n```\n\n## 启用站点\n\n```bash\nsudo a2ensite test.conf\nsudo service apache2 reload\n```\n\n注意调整项目文件的权限，以免权限不足导致部分模块无法使用。\n\n如有问题可以查看位于`/var/log/apache2/error.log`的错误日志\napache2的安装和配置请参考我的另外两篇文章。\n\n> [Ubuntu 16.04 Apache2 设置网站](/2018/11/09/Ubuntu1604-Apache2-deploy-static-website/)\n> [Ubuntu server 16.04 安装 Apache2](/2018/04/15/Ubuntu1604-install-apache2-python-mysql-phpmyadmin/)\n","tags":["Ubuntu","Apache2","Django"],"categories":["Server"]},{"title":"Ubuntu16.04 Apache2 设置网站","url":"/2018/11/09/Ubuntu1604-Apache2-deploy-static-website/","content":"\n### 开启ssl\n\n```bash\nsudo a2enmod ssl\n```\n\n### 开启rewrite\n\n```bash\nsudo a2enmod rewrite\n```\n\n### 设置虚拟主机\n\n这里我以 `www.test.com` 为例。\n在`/etc/apache2/sites-available/`下创建`test.conf`文件，进行以下配置。\n\n<!-- more -->\n\n```plaintext\n<VirtualHost *:80>\n    ServerName [www.test.com]\n    ServerAdmin [管理人员邮箱]\n    RewriteEngine on\n    RewriteCond %{HTTPS} !=on\n    RewriteRule ^(.*) https://%{SERVER_NAME}$1 [L,R=301]\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n<VirtualHost *:443>\n    ServerName [www.test.com]\n    ServerAdmin [管理人员邮箱]\n    DocumentRoot [/var/www/html/test/]\n    SSLEngine on\n    SSLCertificateFile /etc/apache2/ssl/2_[www.test.com].crt\n    SSLCertificateKeyFile /etc/apache2/ssl/3_[www.test.com].key\n    SSLCertificateChainFile /etc/apache2/ssl/1_root_bundle.crt\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\n\n这里我们将 http 以 301 形式重定向到 https\n\n### 启用站点\n\n```bash\nsudo a2ensite test.conf\n```\n\n### Apache2 重载配置文件\n\n```bash\nsudo service apache2 reload\n```\n\n之后我们的网站文件放在`/var/www/html/test/`下就可以访问了\n","tags":["Ubuntu","Apache2"],"categories":["Server"]},{"title":"Tomcat 中文编码问题","url":"/2018/10/24/Tomcat中文编码问题/","content":"\n一般Tomcat默认的编码方式是ISO-8859-1，不支持中文。\n在请求信息包含中文时会出现乱码问题。\n解决方案如下：\n\n<!-- more -->\n\n## 前端\n\n在HTML页面设置编码方式\n\n```html\n<meta charset=\"UTF-8\">\n```\n\n## 后端\n\n### POST\n\n在 获取request参数前（即`request.getParameter();`前）加入以下代码设置解码方式为UTF-8。\n\n```java\nrequest.setCharacterEncoding(\"UTF-8\");\n```\n\n在返回数据前（即`response.getWriter();`前）加入以下代码设置编码方式为UTF-8。\n\n```java\nresponse.setCharacterEncoding(\"UTF-8\");\n```\n\n加入以下代码通知浏览器以UTF-8解码。\n\n```java\nresponse.setContentType(\"text/html;charset=UTF-8\");\n```\n\n### GET\n\n在 获取request参数后，对参数进行二次编码再解码。\n如对searchVal进行二次编码再解码：\n\n```java\nsearchVal = new String(searchVal.getBytes(\"ISO-8859-1\"), \"UTF-8\");\n```\n\nTomcat版本如果大于8则不需要进行此处理。\n但GET请求中参数应尽量避免中文。\n\n在返回数据前的处理和POST相同。\n","tags":["Java","Tomcat"],"categories":["Code","Java"]},{"title":"Ubuntu16.04 安装 Apache2 Python MySQL phpmyadmin","url":"/2018/04/15/Ubuntu1604-install-apache2-python-mysql-phpmyadmin/","content":"\nubuntu服务器配置的一些总结\n\n#### 安装 python3, pip3\n\n```bash\nsudo apt install python3\nsudo apt install python3-pip\n```\n\n#### 安装 mysql\n\n```bash\nsudo apt install mysql-server\nsudo apt install libmysqlclient-dev\n```\n\n<!-- more -->\n\n#### 装 phpmyadmin\n\n一个mysql管理软件，通过网页访问，非常方便\n\n```bash\nsudo apt install php7.0\nsudo apt install apache2\nsudo apt install libapache2-mod-php7.0\nsudo systemctl restart apache2\nsudo apt install phpmyadmin\nsudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin\n```\n\n#### 修改 php 配置文件\n\n```bash\nsudo vim /etc/php/7.0/apache2/php.ini\n```\n\n`display_errors = On`(显示错误日志，出现两次，都要改，不然无效)\n`extension=php_mbstring.dll` (开启mbstring)\n\n#### 重启 Apache\n\n```bash\nsudo /etc/init.d/apache2 restart\n```\n\n然后就可以通过浏览器URL=“【ip地址/域名】/phpmyadmin”访问了\n","tags":["Ubuntu","Linux"],"categories":["Server"]}]